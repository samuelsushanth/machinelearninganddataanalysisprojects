{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8251892,"sourceType":"datasetVersion","datasetId":4896392}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"#BTHMLG14 Forest Monitoring Machine Learing Project\n","metadata":{}},{"cell_type":"markdown","source":"\nIn this report, we analyze the forest cover in the Niokolokoba region. Through various geospatial data techniques, we're able to predict forest cover, calculate carbon emissions from deforestation, and estimate the carbon stock in the region. We use machine learning models and satellite imagery to make our predictions.\n","metadata":{}},{"cell_type":"markdown","source":"\n## Methodology\nThe methodology involves several steps:\n1. **Data Collection**: Satellite imagery is collected for the Niokolokoba region.\n2. **Forest Prediction**: Machine learning models are used to predict forest cover for subsequent years.\n3. **Carbon Calculations**: Using the predicted forest cover, we calculate potential carbon emissions and carbon stock.\n4. **Visualization**: The data is visualized on a map, providing an interactive tool to monitor forests.\n","metadata":{}},{"cell_type":"markdown","source":"## Objective\nAnalyze the dynamics of the Niokolokoba forest in terms of deforestation, reforestation, carbon emissions and carbon stock using satellite images and machine learning predictions.\n\n---\n\n## 1. Data Collection\n- Satellite images of the Niokolokoba forest from 2013 to 2020.\n- Forest cover predictions stored in '.tif' files for each year.\n\n---\n\n## 2. Preliminary Analysis\n- Visualization of images with `rasterio` and `matplotlib`.\n\n---\n\n## 3. Calculation of Carbon Emissions\n- Identification of deforested areas each year.\n- Emissions calculated using average carbon density.\n\n---\n\n## 4. Calculation of Carbon Stock\n- Estimation of carbon stored in existing forest cover.\n\n---\n\n## 5. View on Map\n- Interactive map created with `Folium` showing predictions and calculations.\n\n---\n\n## 6. Analysis of Deforestation and Reforestation\n- Areas of deforestation and reforestation identified and visualized.\n\n---\n\n## 7. User Interface\n- Layer controls, captions, tooltips and popups added for interactivity.\n\n---\n\n## 8. Challenges and Solutions\n- Alignment of images and correct representation of carbon stock among the challenges addressed.\n\n---\n\n## 9. Conclusion\nValuable information on the health of the Niokolokoba forest was obtained, with an interactive map for stakeholders.\n\n---\n\nThis report summarizes the work carried out. Adjustments may be made based on additional needs or analyses.","metadata":{}},{"cell_type":"markdown","source":"## Calculation and visualization of NDVI\n\nWe first determine vegetation health using NDVI (Normalized Difference Vegetation Index). This index uses satellite imagery, particularly the NIR (near infrared) and Red bands, to provide a measure of vegetation health.\n\nBy calculating the NDVI, we obtain a visual representation where healthy vegetation appears green and areas with little or no vegetation appear shades of red.\n\nOnce the NDVI is obtained, we further segment the imagery into vegetation (shown in white) and non-vegetation (shown in black) areas to clearly identify vegetation regions.\n\n---","metadata":{}},{"cell_type":"code","source":"import os\n# Change to the directory where the dataset is located\nos.chdir('/kaggle/input/bthmlgp14')  # Adjust the directory name if necessary\n# List the contents of the directory to verify the files\n!ls\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:37:38.607169Z","iopub.execute_input":"2024-05-15T09:37:38.607573Z","iopub.status.idle":"2024-05-15T09:37:39.756526Z","shell.execute_reply.started":"2024-05-15T09:37:38.607541Z","shell.execute_reply":"2024-05-15T09:37:39.755025Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport rasterio\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef compute_ndvi(nir_path, red_path):\n    with rasterio.open(nir_path) as nir_src:\n        nir_data = nir_src.read(1)\n    with rasterio.open(red_path) as red_src:\n        red_data = red_src.read(1)\n    \n    # NDVI calculation\n    ndvi = (nir_data - red_data) / (nir_data + red_data + 1e-8)\n    return ndvi\n\ndef threshold_segmentation(ndvi_data, threshold=0.2):\n    # Binary segmentation based on NDVI threshold\n    # Vegetation areas will be marked as 1 and non-vegetation as 0\n    return (ndvi_data > threshold).astype(np.uint8)\n\n# Directory containing your files\ndir_path = \".\"\n\n# Retrieve B3 and B4 files\nb3_files = sorted([os.path.join(dir_path, f) for f in os.listdir(dir_path) if 'B3' in f])\nb4_files = sorted([os.path.join(dir_path, f) for f in os.listdir(dir_path) if 'B4' in f])\n\nfor b3_path, b4_path in zip(b3_files, b4_files):\n    ndvi_data = compute_ndvi(b4_path, b3_path)  # B4 is NIR and B3 is Red\n    \n    # Display NDVI\n    plt.imshow(ndvi_data, cmap='RdYlGn', vmin=-1, vmax=1)\n    plt.colorbar(label='NDVI')\n    plt.title(f\"NDVI for {os.path.basename(b4_path)}\")\n    plt.axis('off')\n    plt.show()\n    \n    segmented_data = threshold_segmentation(ndvi_data)\n    \n    # Display Segmentation\n    plt.imshow(segmented_data, cmap='gray')\n    plt.colorbar(label='Segmentation')\n    plt.title(f\"Segmentation for {os.path.basename(b4_path)}\")\n    plt.axis('off')\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:37:42.478851Z","iopub.execute_input":"2024-05-15T09:37:42.479329Z","iopub.status.idle":"2024-05-15T09:38:01.405630Z","shell.execute_reply.started":"2024-05-15T09:37:42.479286Z","shell.execute_reply":"2024-05-15T09:38:01.404390Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Merging raster images\n\nTo get a complete view of an area, it is sometimes necessary to merge or stitch together multiple satellite images. Here we combine two images from the year 2013 to demonstrate this process.\n\nThe side-by-side view shows the two original images and the resulting merged image.\n\n---","metadata":{}},{"cell_type":"code","source":"import rasterio\nfrom rasterio.merge import merge\nfrom rasterio.plot import show\nimport os\nimport matplotlib.pyplot as plt\n\n# Define paths\ndir_path = \".\"\nb3_files = sorted([os.path.join(dir_path, f) for f in os.listdir(dir_path) if 'B3' in f])\n\n# Get the B3 files for 2013 (or any other year you want to test)\nb3_files_year = [file for file in b3_files if \"2013\" in file]\n\n# Check if there are at least two files\nif len(b3_files_year) < 2:\n    raise ValueError(\"There are not enough B3 files for the year 2013 to merge.\")\n\n# Open the two raster images\nsrc1 = rasterio.open(b3_files_year[0])\nsrc2 = rasterio.open(b3_files_year[1])\n\n# Merge them directly using the rasterio.merge.merge() function\nmerged_data, merged_transform = merge([src1, src2])\n\n# Display the result\nfig, axs = plt.subplots(1, 3, figsize=(20, 20))\n\nshow(src1, ax=axs[0], cmap='gray', title=\"Image 1\")\nshow(src2, ax=axs[1], cmap='gray', title=\"Image 2\")\nshow(merged_data, ax=axs[2], transform=merged_transform, cmap='gray', title=\"Merged\")\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-15T09:38:25.583806Z","iopub.execute_input":"2024-05-15T09:38:25.584397Z","iopub.status.idle":"2024-05-15T09:38:43.568075Z","shell.execute_reply.started":"2024-05-15T09:38:25.584363Z","shell.execute_reply":"2024-05-15T09:38:43.566863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Forest cover modeling using deep learning\n\n#### 1. **Data preprocessing**:\n- We define the paths to the mosaic files which contain the satellite images.\n- The first 6 years of data are used for training and the last 2 for evaluation.\n\n#### 2. **Data Labeling**:\n- From NDVI (Normalized Difference Vegetation Index) images, we label areas as forest or non-forest.\n- Regions with a high NDVI value are considered forest, while those with a low NDVI value are considered non-forest.\n\n#### 3. **Extracting patches**:\n- We extract patches or segments from the image.\n- Patches with a high NDVI value are classified as forest, while those with a low NDVI value are classified as non-forest.\n- These patches serve as training data for our model.\n\n#### 4. **Data Augmentation**:\n- To increase the amount of training data and make the model more robust, we use data augmentation techniques, such as rotating and flipping images.\n\n#### 5. **Model Definition**:\nWe use a convolutional neural network (CNN) model with the following architecture:\n\\```\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #\n=================================================================\nConv2D (Conv2D)              (None, 48, 48, 32)        320\n_________________________________________________________________\nMaxPooling2D (MaxPooling2D)  (None, 24, 24, 32)        0\n_________________________________________________________________\nConv2D (Conv2D)              (None, 22, 22, 64)        18496\n_________________________________________________________________\nMaxPooling2D (MaxPooling2D)  (None, 11, 11, 64)        0\n_________________________________________________________________\nFlatten (Flatten)            (None, 7744)              0\n_________________________________________________________________\nDense (Dense)                (None, 64)                495680\n_________________________________________________________________\nDense (Dense)                (None, 1)                 65\n=================================================================\n\\```\n\n\n#### 6. **Model training**:\n- We compile the model using the 'adam' optimizer and the 'binary_crossentropy' loss function.\n- The model is trained on the training data for 10 epochs.\n- We also validate the model using the evaluation data.\n\n#### 7. **Model evaluation**:\n- After training, we evaluate the model's performance on the evaluation data.\n- We calculate several metrics such as precision, recall, F1 score and correctness.\n\n#### 8. **Saving model**:\n- Finally, we save the trained model for later use.\n\n---\n\nNote that the description above is a high-level simplification of the code to help end users understand the steps without going into technical details.\n","metadata":{}},{"cell_type":"markdown","source":"## Chargement et visualisation de la couverture forestière prévue\n\nAprès avoir calculé l'NDVI et fusionné les images, nous utilisons un ensemble d'images de couverture forestière prédites. Ces prédictions nous donnent un aperçu de l'évolution de la couverture forestière au fil des ans.\n\nPour chaque année prédite, nous visualisons :\n- L'NDVI, indiquant la santé de la végétation.\n- La bande NIR, un composant de l'image satellite utile pour l'analyse de la végétation.\n- La couverture forestière prédite, montrant les zones de forêt en vert.\n\n---\n\n## Prédiction de la couverture forestière à l'aide de notre modèle\n\nNous utilisons un modèle pré-entraîné pour prédire la couverture forestière des images satellite. Les prédictions sont basées sur les bandes de couleur de l'imagerie satellite ainsi que sur d'autres caractéristiques pertinentes. Le modèle génère une carte binaire où les régions prédites comme étant des forêts sont marquées en blanc, tandis que les autres régions sont en noir.\n\nUne fois ces prédictions générées, nous les combinons avec les données NDVI et d'autres métriques pour obtenir une image complète de la santé et de la couverture de la forêt.\n","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport zipfile\n\n# If you're in Jupyter Notebook, use the following line:\n%matplotlib inline\n\npredicted_dir = \"./predicted\"\n\n# Path to the zipped .npy file\nzipped_npy_path = os.path.join(predicted_dir, 'predicted_images.zip')\n\nwith zipfile.ZipFile(zipped_npy_path, 'r') as zip_ref:\n    # Assuming there's only one .npy file in the zip, extract its name\n    npy_file_name = zip_ref.namelist()[0]\n    \n    # Load the .npy file directly from the zip\n    with zip_ref.open(npy_file_name) as file:\n        predicted_images = np.load(file)\n\n# The rest of your files appear to be local, so you can continue loading them as you were before:\naccuracies = np.load(os.path.join(predicted_dir, 'accuracies.npy'))\nprecisions = np.load(os.path.join(predicted_dir, 'precisions.npy'))\nrecalls = np.load(os.path.join(predicted_dir, 'recalls.npy'))\nf1_scores = np.load(os.path.join(predicted_dir, 'f1_scores.npy'))\n\npredicted_image_files = sorted([os.path.join(predicted_dir, f) for f in os.listdir(predicted_dir) if f.endswith('.tif')])\nyears = [os.path.basename(f)[-8:-4] for f in predicted_image_files]\n\n# Plotting the evaluation metrics\nplt.figure(figsize=(10, 6))\nplt.plot(years, accuracies, '-o', label='Accuracy')\nplt.plot(years, precisions, '-o', label='Precision')\nplt.plot(years, recalls, '-o', label='Recall')\nplt.plot(years, f1_scores, '-o', label='F1 Score')\nplt.legend()\nplt.title('Evaluation Metrics Over Years')\nplt.xlabel('Year')\nplt.ylabel('Score')\nplt.grid(True)\nplt.savefig(\"./metrics_over_years.png\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T09:44:22.915858Z","iopub.execute_input":"2024-04-28T09:44:22.916269Z","iopub.status.idle":"2024-04-28T09:44:23.406881Z","shell.execute_reply.started":"2024-04-28T09:44:22.916239Z","shell.execute_reply":"2024-04-28T09:44:23.405276Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Métriques de conservation des forêts au fil du temps\n\nLes forêts jouent un rôle crucial dans la séquestration du carbone, aidant à atténuer le changement climatique. Nous analysons nos données pour fournir des informations sur :\n- L'étendue de la couverture forestière sur différentes années.\n- La quantité de carbone stockée dans ces forêts.\n- Les émissions de carbone résultant de la déforestation.\n\nLes visualisations offrent un aperçu de la superficie de la couverture forestière, du carbone stocké dans la forêt (stock de carbone) et du carbone libéré en raison de la déforestation (émissions de carbone) au fil des ans.\n\n---","metadata":{}},{"cell_type":"markdown","source":"## Visualisation de carte interactive\n\nPour une expérience interactive, nous créons une carte qui permet aux utilisateurs de voir diverses couches, notamment :\n- L'imagerie satellite de la zone.\n- La couverture forestière prévue pour chaque année.\n- Les émissions de carbone dues à la déforestation.\n- Le carbone stocké dans la forêt.\n\nCette carte fournit une vue complète du Parc National du Niokolo-Koba, mettant en évidence les zones de déforestation, de reforestation et la santé globale de la forêt.\n\n---","metadata":{}},{"cell_type":"code","source":"import os\nimport rasterio\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\n\n# Function to compute NDVI\ndef compute_ndvi(red_band, nir_band):\n    return (nir_band - red_band) / (nir_band + red_band + 1e-8)\n\n# Load the data\nndvi_images = []\nnir_images = []\npredicted_images = []\nyears = []\n\nfor b3_file, b4_file, pred_file in zip(b3_files, b4_files, predicted_image_files):\n    year = os.path.basename(b3_file)[-8:-4]\n    \n    with rasterio.open(b3_file) as red_src:\n        red_band = red_src.read(1)\n        \n    with rasterio.open(b4_file) as nir_src:\n        nir_band = nir_src.read(1)\n    \n    with rasterio.open(pred_file) as pred_src:\n        pred_img = pred_src.read(1)\n        \n    ndvi_img = compute_ndvi(red_band, nir_band)\n    \n    ndvi_images.append(ndvi_img)\n    nir_images.append(nir_band)\n    predicted_images.append(pred_img)\n    years.append(year)\n\n# Animation function\ndef animate(i):\n    ax[0].clear()\n    ax[1].clear()\n    ax[2].clear()\n    \n    ax[0].imshow(ndvi_images[i], cmap='RdYlGn', vmin=-1, vmax=1)\n    ax[0].set_title(f\"NDVI: Year {years[i]}\")\n    \n    ax[1].imshow(predicted_images[i], cmap='Greens', vmin=0, vmax=1)\n    ax[1].set_title(f\"Predicted Forest Cover: Year {years[i]}\")\n    \n    ax[2].imshow(nir_images[i], cmap='gray')\n    ax[2].set_title(f\"NIR Band: Year {years[i]}\")\n    \n    for a in ax:\n        a.axis('off')\n\nfig, ax = plt.subplots(1, 3, figsize=(15, 5))\nani = animation.FuncAnimation(fig, animate, frames=len(years), repeat=True)\n\n# Display the animation\nHTML(ani.to_jshtml())\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport os\nimport rasterio\nfrom PIL import Image\nimport folium\nfrom folium.plugins import MiniMap\nimport geopandas as gpd\n\n# Constants\nPIXEL_AREA = 30 * 30\nAVERAGE_CARBON_DENSITY_MATURE = 200\nDEFORESTATION_THRESHOLD = 5  # 5% of the forest cover lost\nCARBON_STOCK_DECREASE_THRESHOLD = 10 # 10% decrease in carbon stock\n\n# Constants for Mapbox\nMAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiZGJjb29wZXIxOSIsImEiOiJjbGlveWZyeGgwNHNzM2xucWtmeHRtdjRjIn0.eR5g-CGcSLPyW_d_x-BAKw'\nMAPBOX_SATELLITE_URL = f\"https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v11/tiles/256/{{z}}/{{x}}/{{y}}@2x?access_token={MAPBOX_ACCESS_TOKEN}\"\nMAPBOX_HYDROLOGY_URL = f\"https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/tiles/256/{{z}}/{{x}}/{{y}}@2x?access_token={MAPBOX_ACCESS_TOKEN}\"\n\n# Initialize folium map\ncenter_coords = [13.0667, -12.7167]\nm = folium.Map(location=center_coords, zoom_start=10, tiles=None)\n\n# Add MiniMap\nminimap = MiniMap()\nm.add_child(minimap)\n\n# Add base layers\nfolium.TileLayer(MAPBOX_HYDROLOGY_URL, attr=\"Mapbox Hydrology\", name=\"Hydrology\").add_to(m)\nfolium.TileLayer(MAPBOX_SATELLITE_URL, attr=\"Mapbox Satellite\", name=\"Satellite Imagery\").add_to(m)\nfolium.TileLayer('openstreetmap').add_to(m)\nfolium.TileLayer('Stamen Terrain').add_to(m)\nfolium.TileLayer('Stamen Toner').add_to(m)\n\n# Directory for predicted images\npredicted_dir = \"./predicted\"\npredicted_image_files = sorted([os.path.join(predicted_dir, f) for f in os.listdir(predicted_dir) if f.endswith('.tif')])\n\nprevious_forest_cover = None\ncarbon_emission_layers = []\ncarbon_stock_layers = []\n\nfor f in predicted_image_files:\n    with rasterio.open(f) as src:\n        forest_cover = src.read(1) > 0.5\n\n        if previous_forest_cover is not None:\n            deforestation = np.logical_and(previous_forest_cover, ~forest_cover)\n            carbon_emission = deforestation.astype(np.float32) * AVERAGE_CARBON_DENSITY_MATURE\n            carbon_emission_layers.append(carbon_emission)\n        else:\n            carbon_emission_layers.append(np.zeros_like(forest_cover, dtype=np.float32))\n\n        carbon_stock = forest_cover.astype(np.float32) * AVERAGE_CARBON_DENSITY_MATURE\n        carbon_stock_layers.append(carbon_stock)\n\n        previous_forest_cover = forest_cover\n\n# Image bounds\nimage_bounds = [[13.0667 - 0.5, -12.7167 - 0.5], [13.0667 + 0.5, -12.7167 + 0.5]]\n\nfor year in range(2013, 2021):\n    overlay_image_path = f\"./colored_images/forest_overlay_{year}.png\"\n    emission_image_path = f\"./emission_colored_images/carbon_emission_{year}.png\"\n    stock_image_path = f\"./stock_colored_images/carbon_stock_{year}.png\"\n\n    img = folium.raster_layers.ImageOverlay(name=f\"Predicted Forest {year}\", image=overlay_image_path, bounds=image_bounds, opacity=0.6, show=False)\n    img.add_child(folium.Popup(f'Predicted Forest Cover for {year}'))\n    img.add_to(m)\n\n    emission_img = folium.raster_layers.ImageOverlay(name=f\"Carbon Emission {year}\", image=emission_image_path, bounds=image_bounds, opacity=0.6, show=False)\n    emission_img.add_to(m)\n\n    stock_img = folium.raster_layers.ImageOverlay(name=f\"Carbon Stock {year}\", image=stock_image_path, bounds=image_bounds, opacity=0.6, show=False)\n    stock_img.add_to(m)\n\n# Load Niokolo-Koba Park shapefile using geopandas\nshp_path = \"./niokolokoshp/WDPA_WDOECM_Sep2023_Public_2580_shp_0.zip\"\nniokolokoba_gdf = gpd.read_file(shp_path)\n\n# Add Niokolo-Koba Park shapefile to folium map with a distinct color\nstyle_function_park = lambda x: {'fillColor': '#32CD32', 'color': '#32CD32', 'fillOpacity': 0.5, 'weight': 0.5}\nfolium.GeoJson(niokolokoba_gdf, style_function=style_function_park, name=\"Niokolo-Koba National Park\").add_to(m)\n\nimport re\n\nalerts = []\n\n# Regular expression pattern to match a four-digit year\nyear_pattern = re.compile(r'\\b\\d{4}\\b')\n\nfor f in predicted_image_files:\n    # Extracting the year using regex\n    match = year_pattern.search(f)\n    if not match:\n        continue  # Skip files that don't have a year in the filename\n    \n    year = int(match.group())\n\n    with rasterio.open(f) as src:\n        forest_cover = src.read(1) > 0.2\n\n        if previous_forest_cover is not None:\n            deforestation = np.logical_and(previous_forest_cover, ~forest_cover)\n            deforestation_percentage = (deforestation.sum() / previous_forest_cover.sum()) * 100\n            print(f\"Deforestation percentage for {year}: {deforestation_percentage:.2f}%\")\n            \n            if deforestation_percentage > DEFORESTATION_THRESHOLD:\n                alerts.append(f\"ALERT for {year}: More than 5% of the forest was cleared.\")\n\n            carbon_stock = forest_cover.astype(np.float32) * AVERAGE_CARBON_DENSITY_MATURE\n            if previous_year_carbon_stock is not None:\n                change_in_carbon_stock = (carbon_stock.sum() - previous_year_carbon_stock) / previous_year_carbon_stock * 100\n                print(f\"Change in carbon stock for {year}: {change_in_carbon_stock:.2f}%\")\n                \n                if change_in_carbon_stock < -CARBON_STOCK_DECREASE_THRESHOLD:\n                    alerts.append(f\"ALERT for {year}: Carbon stock decreased by more than 10% compared to the previous year.\")\n\n            previous_year_carbon_stock = carbon_stock.sum()\n\n        previous_forest_cover = forest_cover\n\n\n\n\n# Add alerts to the folium map\nfor alert in alerts:\n    folium.Marker(\n        location=center_coords,\n        popup=alert,\n        icon=folium.Icon(color=\"red\", icon=\"exclamation-circle\")\n    ).add_to(m)\n    \n# Enhanced legend with hover functionality\nlegend_html = \"\"\"\n<div style=\"position: fixed; bottom: 50px; left: 50px; z-index:9999; font-size:14px; background-color: white; padding: 10px; border-radius: 5px;\">\n    <b>Legend:</b><br>\n    <i class=\"fa fa-square fa-1x\" style=\"color:green\"></i> Predicted Forest<br>\n    <i class=\"fa fa-square fa-1x\" style=\"color:red\"></i> Carbon Emission (due to deforestation)<br>\n    <i class=\"fa fa-square fa-1x\" style=\"color:blue\"></i> Carbon Stock<br>\n</div>\n\"\"\"\nm.get_root().html.add_child(folium.Element(legend_html))\n\n# Layer Control\nfolium.LayerControl().add_to(m)\n\nm\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport os\nimport rasterio\nfrom matplotlib import pyplot as plt\n\n# Directory containing the predicted images\npredicted_dir = \"./predicted\"\npredicted_image_files = sorted([os.path.join(predicted_dir, f) for f in os.listdir(predicted_dir) if f.endswith('.tif')])\n\n# Constants\nPIXEL_AREA = 30 * 30  # Assuming each pixel represents 30m x 30m\nAVERAGE_CARBON_DENSITY_MATURE = 200  # Average carbon density for mature forests (tonnes per hectare)\nAVERAGE_CARBON_DENSITY_YOUNG = 50  # Average carbon density for young/regrowing forests (tonnes per hectare)\n\nforest_cover_area = []\ntotal_carbon_stock = []\nregrowth_areas = []\ndeforested_areas = []\n\nprevious_forest_cover = None\nfor f in predicted_image_files:\n    with rasterio.open(f) as src:\n        forest_cover = src.read(1) > 0.5\n        \n        # Calculate forest cover area\n        forest_area = np.sum(forest_cover) * PIXEL_AREA / (10**6)  # in sq.km\n        forest_cover_area.append(forest_area)\n        \n        # Calculate carbon stock\n        carbon_stock = forest_area * AVERAGE_CARBON_DENSITY_MATURE  # in tonnes\n        total_carbon_stock.append(carbon_stock)\n        \n        # If there's a previous year's data, calculate regrowth and deforested areas\n        if previous_forest_cover is not None:\n            regrowth = np.logical_and(~previous_forest_cover, forest_cover)\n            deforestation = np.logical_and(previous_forest_cover, ~forest_cover)\n            regrowth_areas.append(np.sum(regrowth) * PIXEL_AREA / (10**6))\n            deforested_areas.append(np.sum(deforestation) * PIXEL_AREA / (10**6))\n        else:\n            regrowth_areas.append(0)\n            deforested_areas.append(0)\n        \n        previous_forest_cover = forest_cover\n\n# Carbon emissions due to deforestation\ncarbon_emissions = np.array(deforested_areas) * AVERAGE_CARBON_DENSITY_MATURE\n\n# Visualization\nyears = list(range(2013, 2021))\n\n# Colors and style\ncolor_palette = [\"#2ecc71\", \"#3498db\", \"#e74c3c\"]\nfont = {'family': 'Arial', 'weight': 'normal', 'size': 12}\n\n# Forest Cover Area Plot\nplt.figure(figsize=(12, 6))\nplt.plot(years, forest_cover_area, marker='o', color=color_palette[0], label=\"Forest Cover Area (sq.km)\", linewidth=2.5)\nplt.title('Forest Cover Area Over the Years', fontdict={'size': 16, 'weight': 'bold'})\nplt.xlabel('Year', fontdict=font)\nplt.ylabel('Area (sq.km)', fontdict=font)\nplt.grid(True, which=\"both\", ls=\"--\", c='0.7')\nplt.legend(loc=\"upper left\", prop={'size': 12})\nplt.tight_layout()\nplt.show()\n\n# Carbon Stock Plot\nplt.figure(figsize=(12, 6))\nplt.plot(years, total_carbon_stock, marker='o', color=color_palette[1], label=\"Carbon Stock (tonnes)\", linewidth=2.5)\nplt.title('Carbon Stock Over the Years', fontdict={'size': 16, 'weight': 'bold'})\nplt.xlabel('Year', fontdict=font)\nplt.ylabel('Carbon Stock (tonnes)', fontdict=font)\nplt.grid(True, which=\"both\", ls=\"--\", c='0.7')\nplt.legend(loc=\"upper left\", prop={'size': 12})\nplt.tight_layout()\nplt.show()\n\n# Carbon Emissions Bar Plot\nplt.figure(figsize=(12, 6))\nbars = plt.bar(years, carbon_emissions, color=color_palette[2], edgecolor='black')\nplt.title('Carbon Emissions Due to Deforestation Over the Years', fontdict={'size': 16, 'weight': 'bold'})\nplt.xlabel('Year', fontdict=font)\nplt.ylabel('Carbon Emissions (tonnes)', fontdict=font)\nplt.grid(axis='y', which=\"both\", ls=\"--\", c='0.7')\n# Adding shadow to bars\nfor bar in bars:\n    bar.set_zorder(1)\n    bar.set_edgecolor(\"black\")\n    bar.set_linewidth(0.7)\nplt.tight_layout()\nplt.show()\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport folium\nfrom folium.plugins import MiniMap\nimport ipywidgets as widgets\nfrom IPython.display import display, clear_output\nimport geopandas as gpd\nimport numpy as np\nfrom PIL import Image\n\n# Constants and Map Initialization\ncenter_coords = [13.0667, -12.7167]\nMAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiZGJjb29wZXIxOSIsImEiOiJjbGlveWZyeGgwNHNzM2xucWtmeHRtdjRjIn0.eR5g-CGcSLPyW_d_x-BAKw'\nMAPBOX_SATELLITE_URL = f\"https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v11/tiles/256/{{z}}/{{x}}/{{y}}@2x?access_token={MAPBOX_ACCESS_TOKEN}\"\nMAPBOX_HYDROLOGY_URL = f\"https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/tiles/256/{{z}}/{{x}}/{{y}}@2x?access_token={MAPBOX_ACCESS_TOKEN}\"\nimage_bounds = [[13.0667 - 0.6, -12.7167 - 0.6], [13.0667 + 0.4, -12.7167 + 0.4]]\n\n# Add Niokolo-Koba Park shapefile\nshp_path = \"./niokolokoshp/WDPA_WDOECM_Sep2023_Public_2580_shp_0.zip\"\nniokolokoba_gdf = gpd.read_file(shp_path)\nstyle_function_park = lambda x: {'fillColor': '#32CD32', 'color': '#32CD32', 'fillOpacity': 0.5, 'weight': 0.5}\n\n# ... [Rest of the data loading and processing remains unchanged]\n\n# Define the paths for each year\nlayers_by_year = {}\nfor year in range(2013, 2021):\n    overlay_image_path = f\"./colored_images/forest_overlay_{year}.png\"\n    emission_image_path = f\"./emission_colored_images/carbon_emission_{year}.png\"\n    stock_image_path = f\"./stock_colored_images/carbon_stock_{year}.png\"\n    layers_by_year[year] = (overlay_image_path, emission_image_path, stock_image_path)\n\n\n# Define alert thresholds\nFOREST_COVER_DECREASE_THRESHOLD = 10  # sq.km\nFOREST_COVER_INCREASE_THRESHOLD = 10  # sq.km\nCARBON_EMISSION_THRESHOLD = 1000  # tonnes\nCARBON_STOCK_DECREASE_THRESHOLD = 1000  # tonnes\nCARBON_STOCK_INCREASE_THRESHOLD = 1000  # tonnes\n\ndef generate_alerts(year, image_type):\n    \"\"\"Generate alerts based on forest data for the given year and image type.\"\"\"\n    alerts = []\n\n    idx = years.index(year)\n    \n    if image_type == \"Predicted Forest\":\n        # Alert for significant decrease in forest cover\n        if idx > 0 and (forest_cover_area[idx-1] - forest_cover_area[idx]) >= FOREST_COVER_DECREASE_THRESHOLD:\n            alerts.append(\"⚠️ Dramatic Deforestation Detected!\")\n        if idx > 0 and (forest_cover_area[idx] - forest_cover_area[idx-1]) >= FOREST_COVER_INCREASE_THRESHOLD:\n            alerts.append(\"🌱 Significant Reforestation Detected!\")\n\n    elif image_type == \"Carbon Emission\":\n        # Alert for high carbon emission\n        if carbon_emissions[idx] >= CARBON_EMISSION_THRESHOLD:\n            alerts.append(f\"⚠️ High Carbon Emission Detected: {carbon_emissions[idx]:.2f} tonnes!\")\n\n    elif image_type == \"Carbon Stock\":\n        # Alert for significant decrease in carbon stock\n        if idx > 0 and (total_carbon_stock[idx-1] - total_carbon_stock[idx]) >= CARBON_STOCK_DECREASE_THRESHOLD:\n            alerts.append(f\"⚠️ Significant Decrease in Carbon Stock: {total_carbon_stock[idx]:.2f} tonnes!\")\n        # Alert for significant increase in carbon stock\n        if idx > 0 and (total_carbon_stock[idx] - total_carbon_stock[idx-1]) >= CARBON_STOCK_INCREASE_THRESHOLD:\n            alerts.append(f\"🌱 Significant Increase in Carbon Stock: {total_carbon_stock[idx]:.2f} tonnes!\")\n\n    return alerts\n\ndef display_map(year, image_type):\n    # Create a new map\n    m = folium.Map(location=center_coords, zoom_start=10, tiles=None)\n    \n    # Add base layers\n    folium.TileLayer(MAPBOX_HYDROLOGY_URL, attr=\"Mapbox Hydrology\", name=\"Hydrology\").add_to(m)\n    folium.TileLayer(MAPBOX_SATELLITE_URL, attr=\"Mapbox Satellite\", name=\"Satellite Imagery\").add_to(m)\n    folium.TileLayer('openstreetmap').add_to(m)\n    folium.TileLayer('Stamen Terrain').add_to(m)\n    folium.TileLayer('Stamen Toner').add_to(m)\n\n    # Add MiniMap\n    minimap = MiniMap(tile_layer='Stamen Terrain', position='bottomright')\n    m.add_child(minimap)\n\n    # Add park shapefile\n    folium.GeoJson(niokolokoba_gdf, style_function=style_function_park, name=\"Niokolo-Koba National Park\").add_to(m)\n    \n    # Add the layers for the selected year to the map\n    overlay_image_path, emission_image_path, stock_image_path = layers_by_year.get(year, ('', '', ''))\n    \n    # Check if the paths are valid\n    if overlay_image_path and os.path.exists(overlay_image_path) and image_type == \"Predicted Forest\":\n        folium.raster_layers.ImageOverlay(name=f\"Predicted Forest {year}\", image=overlay_image_path, bounds=image_bounds, opacity=0.6).add_to(m)\n    elif emission_image_path and os.path.exists(emission_image_path) and image_type == \"Carbon Emission\":\n        folium.raster_layers.ImageOverlay(name=f\"Carbon Emission {year}\", image=emission_image_path, bounds=image_bounds, opacity=0.6).add_to(m)\n    elif stock_image_path and os.path.exists(stock_image_path) and image_type == \"Carbon Stock\":\n        folium.raster_layers.ImageOverlay(name=f\"Carbon Stock {year}\", image=stock_image_path, bounds=image_bounds, opacity=0.6).add_to(m)\n\n    # Generate and display alerts for the selected year and image type\n    alerts = generate_alerts(year, image_type)\n    for alert in alerts:\n        folium.Marker(\n            location=center_coords, \n            popup=alert,\n            icon=folium.Icon(color=\"red\", icon=\"warning-sign\", prefix=\"fa\")\n        ).add_to(m)\n\n    # Add LayerControl\n    folium.LayerControl().add_to(m)\n    \n    # Display the map\n    clear_output(wait=True)\n    display(m)\n\n\n# Create interactive widgets\nyear_slider = widgets.IntSlider(min=2013, max=2020, step=1, value=2013, description='Year:')\nimage_dropdown = widgets.Dropdown(options=[\"Predicted Forest\", \"Carbon Emission\", \"Carbon Stock\"], value=\"Predicted Forest\", description='Image Type:')\nwidgets.interactive(display_map, year=year_slider, image_type=image_dropdown)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"&copy; BTHMLG14","metadata":{}}]}